{"version":3,"sources":["components/Formulario.js","components/Cita.js","App.js","reportWebVitals.js","index.js"],"names":["Formulario","crearCita","useState","mascota","propietario","fecha","hora","sintomas","cita","actualizarCita","error","actualizarError","actualizarState","e","target","name","value","className","onSubmit","preventDefault","trim","id","uuidv4","type","placeholder","onChange","Cita","eliminarCita","onClick","App","citasIniciales","JSON","parse","localStorage","getItem","citas","guardarCitas","useEffect","setItem","stringify","nuevasCitas","filter","titulo","length","map","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kNAoIeA,EAjII,SAAC,GAAmB,IAAjBC,EAAgB,EAAhBA,UAAgB,EAGLC,mBAAS,CACtCC,QAAS,GACTC,YAAa,GACbC,MAAO,GACPC,KAAM,GACNC,SAAU,KARwB,mBAG7BC,EAH6B,KAGvBC,EAHuB,OAWHP,oBAAS,GAXN,mBAW7BQ,EAX6B,KAWtBC,EAXsB,KAe9BC,EAAkB,SAACC,GACvBJ,EAAe,2BACVD,GADS,kBAEXK,EAAEC,OAAOC,KAAOF,EAAEC,OAAOE,UAKtBb,EAAgDK,EAAhDL,QAASC,EAAuCI,EAAvCJ,YAAaC,EAA0BG,EAA1BH,MAAOC,EAAmBE,EAAnBF,KAAMC,EAAaC,EAAbD,SAuC3C,OACE,eAAC,WAAD,WACE,4CACCG,EACC,mBAAGO,UAAU,eAAb,8CACE,KAEJ,uBAAMC,SA1CS,SAACL,GAClBA,EAAEM,iBAKmB,KAAnBhB,EAAQiB,QACe,KAAvBhB,EAAYgB,QACK,KAAjBf,EAAMe,QACU,KAAhBd,EAAKc,QACe,KAApBb,EAASa,QAOXT,GAAgB,GAGhBH,EAAKa,GAAKC,cAEVrB,EAAUO,GAIVC,EAAe,CACbN,QAAS,GACTC,YAAa,GACbC,MAAO,GACPC,KAAM,GACNC,SAAU,MAnBVI,GAAgB,IA8BhB,UACE,mDAEA,uBACEY,KAAK,OACLR,KAAK,UACLE,UAAU,eACVO,YAAY,iBACZC,SAAUb,EACVI,MAAOb,IAGT,2DAEA,uBACEoB,KAAK,OACLR,KAAK,cACLE,UAAU,eACVO,YAAY,mCACZC,SAAUb,EACVI,MAAOZ,IAGT,0CAEA,uBACEmB,KAAK,OACLR,KAAK,QACLE,UAAU,eACVQ,SAAUb,EACVI,MAAOX,IAGT,yCAEA,uBACEkB,KAAK,OACLR,KAAK,OACLE,UAAU,eACVQ,SAAUb,EACVI,MAAOV,IAGT,6CAEA,0BACES,KAAK,WACLE,UAAU,eACVQ,SAAUb,EACVI,MAAOT,IAGT,wBAAQgB,KAAK,SAASN,UAAU,8BAAhC,iCCjGOS,EAzBF,SAAC,GAA4B,IAA1BlB,EAAyB,EAAzBA,KAAMmB,EAAmB,EAAnBA,aACpB,OACE,qBAAKV,UAAU,OAAf,SACE,0CACW,+BAAOT,EAAKL,UACrB,uBAFF,aAGS,+BAAOK,EAAKJ,cACnB,uBAJF,UAKS,+BAAOI,EAAKH,QACnB,uBANF,SAOQ,+BAAOG,EAAKF,OAClB,uBARF,aASY,+BAAOE,EAAKD,WACtB,uBACA,wBACEU,UAAU,+BACVW,QAAS,kBAAMD,EAAanB,EAAKa,KAFnC,iCC2COQ,MAvDf,WAEE,IAAIC,EAAiBC,KAAKC,MAAMC,aAAaC,QAAQ,UAChDJ,IACHA,EAAiB,IAJN,MAOiB5B,mBAAS4B,GAP1B,mBAONK,EAPM,KAOCC,EAPD,KAUbC,qBAAU,WACJP,EACFG,aAAaK,QAAQ,QAASP,KAAKQ,UAAUJ,IAE7CF,aAAaK,QAAQ,QAASP,KAAKQ,UAAU,OAE9C,CAACJ,EAAOL,IAGX,IAMMH,EAAe,SAACN,GACpB,IAAMmB,EAAcL,EAAMM,QAAO,SAACjC,GAAD,OAAUA,EAAKa,KAAOA,KACvDe,EAAaI,IAKTE,EAA0B,IAAjBP,EAAMQ,OAAe,eAAiB,uBAErD,OACE,eAAC,WAAD,WACE,4DAEA,qBAAK1B,UAAU,YAAf,SACE,sBAAKA,UAAU,MAAf,UACE,qBAAKA,UAAU,kBAAf,SACE,cAAC,EAAD,CAAYhB,UAtBJ,SAACO,GACjB4B,EAAa,GAAD,mBAAKD,GAAL,CAAY3B,UAuBlB,sBAAKS,UAAU,kBAAf,UACE,6BAAKyB,IACJP,EAAMS,KAAI,SAACpC,GAAD,OACT,cAAC,EAAD,CAAoBA,KAAMA,EAAMmB,aAAcA,GAAnCnB,EAAKa,mBCtCfwB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.4f37799b.chunk.js","sourcesContent":["import React, { Fragment, useState } from \"react\";\r\n\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nconst Formulario = ({ crearCita }) => {\r\n  //Crear state de citas\r\n\r\n  const [cita, actualizarCita] = useState({\r\n    mascota: \"\",\r\n    propietario: \"\",\r\n    fecha: \"\",\r\n    hora: \"\",\r\n    sintomas: \"\",\r\n  });\r\n\r\n  const [error, actualizarError] = useState(false);\r\n\r\n  //   funcion que se ejecuta cada que un usuario escribe en un input\r\n\r\n  const actualizarState = (e) => {\r\n    actualizarCita({\r\n      ...cita,\r\n      [e.target.name]: e.target.value,\r\n    });\r\n  };\r\n\r\n  // Extarer valores\r\n  const { mascota, propietario, fecha, hora, sintomas } = cita;\r\n\r\n  // Enviar folmulario : Boton\r\n\r\n  const submitCita = (e) => {\r\n    e.preventDefault();\r\n\r\n    // Validar\r\n\r\n    if (\r\n      mascota.trim() === \"\" ||\r\n      propietario.trim() === \"\" ||\r\n      fecha.trim() === \"\" ||\r\n      hora.trim() === \"\" ||\r\n      sintomas.trim() === \"\"\r\n    ) {\r\n      actualizarError(true);\r\n      return;\r\n    }\r\n\r\n    //eliminar el mensaje previo\r\n    actualizarError(false);\r\n\r\n    // Asignar ID\r\n    cita.id = uuidv4();\r\n    // Crear la cita\r\n    crearCita(cita);\r\n\r\n    //reiniciar el form\r\n\r\n    actualizarCita({\r\n      mascota: \"\",\r\n      propietario: \"\",\r\n      fecha: \"\",\r\n      hora: \"\",\r\n      sintomas: \"\",\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <h2>Crear Cita</h2>\r\n      {error ? (\r\n        <p className=\"alerta-error\">Todos los campos son obligtorios</p>\r\n      ) : null}\r\n\r\n      <form onSubmit={submitCita}>\r\n        <label>Nombre Mascota</label>\r\n\r\n        <input\r\n          type=\"text\"\r\n          name=\"mascota\"\r\n          className=\"u-full-width\"\r\n          placeholder=\"Nombre mascota\"\r\n          onChange={actualizarState}\r\n          value={mascota}\r\n        />\r\n\r\n        <label>Nombre del propietario</label>\r\n\r\n        <input\r\n          type=\"text\"\r\n          name=\"propietario\"\r\n          className=\"u-full-width\"\r\n          placeholder=\"Nombre propietario de la mascota\"\r\n          onChange={actualizarState}\r\n          value={propietario}\r\n        />\r\n\r\n        <label>fecha</label>\r\n\r\n        <input\r\n          type=\"date\"\r\n          name=\"fecha\"\r\n          className=\"u-full-width\"\r\n          onChange={actualizarState}\r\n          value={fecha}\r\n        />\r\n\r\n        <label>hora</label>\r\n\r\n        <input\r\n          type=\"time\"\r\n          name=\"hora\"\r\n          className=\"u-full-width\"\r\n          onChange={actualizarState}\r\n          value={hora}\r\n        />\r\n\r\n        <label>Sintomas</label>\r\n\r\n        <textarea\r\n          name=\"sintomas\"\r\n          className=\"u-full-width\"\r\n          onChange={actualizarState}\r\n          value={sintomas}\r\n        ></textarea>\r\n\r\n        <button type=\"submit\" className=\"u-full-width button-primary\">\r\n          Agregar cita\r\n        </button>\r\n      </form>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default Formulario;\r\n","import React from \"react\";\r\n\r\nconst Cita = ({ cita, eliminarCita }) => {\r\n  return (\r\n    <div className=\"cita\">\r\n      <p>\r\n        Mascota: <span>{cita.mascota}</span>\r\n        <br />\r\n        Due√±o: <span>{cita.propietario}</span>\r\n        <br />\r\n        Fecha: <span>{cita.fecha}</span>\r\n        <br />\r\n        Hora: <span>{cita.hora}</span>\r\n        <br />\r\n        Sintomas: <span>{cita.sintomas}</span>\r\n        <br />\r\n        <button\r\n          className=\"button eliminar u-full-width\"\r\n          onClick={() => eliminarCita(cita.id)}\r\n        >\r\n          Eliminar &times;\r\n        </button>\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Cita;\r\n","import React, { Fragment, useState, useEffect } from \"react\";\nimport Formulario from \"./components/Formulario\";\nimport Cita from \"./components/Cita\";\n\nfunction App() {\n  //Citas en LocalStorage\n  let citasIniciales = JSON.parse(localStorage.getItem(\"citas\"));\n  if (!citasIniciales) {\n    citasIniciales = [];\n  }\n  // Arreglo de citas\n  const [citas, guardarCitas] = useState(citasIniciales);\n\n  // Use Effect para realizar ciertas operaciones cuando el state cambia\n  useEffect(() => {\n    if (citasIniciales) {\n      localStorage.setItem(\"citas\", JSON.stringify(citas));\n    } else {\n      localStorage.setItem(\"citas\", JSON.stringify([]));\n    }\n  }, [citas, citasIniciales]);\n\n  //Fucion citas actuales ++ nueva\n  const crearCita = (cita) => {\n    guardarCitas([...citas, cita]);\n  };\n\n  //funcion que elimina las citas por ID\n\n  const eliminarCita = (id) => {\n    const nuevasCitas = citas.filter((cita) => cita.id !== id);\n    guardarCitas(nuevasCitas);\n  };\n\n  //mensaje condicional\n\n  const titulo = citas.length === 0 ? \"No hay citas\" : \"Administra tus citas\";\n\n  return (\n    <Fragment>\n      <h1>Administrador de pacientes</h1>\n\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"one-half column\">\n            <Formulario crearCita={crearCita} />\n          </div>\n          <div className=\"one-half column\">\n            <h2>{titulo}</h2>\n            {citas.map((cita) => (\n              <Cita key={cita.id} cita={cita} eliminarCita={eliminarCita} />\n            ))}\n          </div>\n        </div>\n      </div>\n    </Fragment>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}